//file:noinspection GroovyUnusedAssignment
//file:noinspection GroovyAssignabilityCheck
//file:noinspection JCenterRepository


import java.nio.file.*

buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url = 'https://maven.minecraftforge.net' }
        jcenter()
        mavenCentral()
        gradlePluginPortal()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1.+', changing: true
    }
}

apply plugin: 'net.minecraftforge.gradle'

// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'java'
apply plugin: 'maven-publish'

println('Java: ' + System.getProperty('java.version') + '\n JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ')\n Arch: ' + System.getProperty('os.arch'))
println("OS: " + System.getProperty("os.name") + "\n OS Version: " + System.getProperty("os.version"))

def incrementBuildNumber() {
    String content = ""
    String filePath = "buildnumber.txt"

    println("Current Path: " + new File('.').getAbsolutePath())

    try {
        content = new String(Files.readAllBytes(FileSystems.getDefault().getPath(project.getRootDir().getAbsolutePath(), filePath)))
    } catch (FileNotFoundException | NoSuchFileException ignored) {
        content = "-1"
    } catch (IOException e) {
        throw new RuntimeException(e)
    }

    String buildNrString = content
    Integer buildNumber = Integer.valueOf(buildNrString)

    // Advance build number.
    buildNumber++
    println("Executing Build " + buildNumber)
    String newBuild = buildNumber.toString()

    // Write new build number.
    Files.write(Paths.get("${projectDir}/buildnumber.txt"), newBuild.getBytes(), StandardOpenOption.CREATE, StandardOpenOption.WRITE)

    return buildNumber
}

int buildNumber = incrementBuildNumber()

// Read build number file.
int version1 = Integer.parseInt(project.property("version").toString())
int release = Integer.parseInt(project.property("versionRelease").toString())

version version1 + "." + release + '.' + buildNumber
group 'com.qtech.masterweapons' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'masterweapons'

sourceCompatibility = compileJava.sourceCompatibility = '1.8' // Need this here so eclipse task generates correctly.
targetCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))



minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'snapshot', version: '20210309-1.16.5'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            //noinspection GroovyAssignabilityCheck
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                masterweapons {
                    //noinspection GroovyAssignabilityCheck
                    source sourceSets.main
                }
            }
        }

        server {
            //noinspection GroovyAssignabilityCheck
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                masterweapons {
                    //noinspection GroovyAssignabilityCheck
                    source sourceSets.main
                }
            }
        }

        data {
            //noinspection GroovyAssignabilityCheck
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'masterweapons', '--all', '--output', file('src/generated/resources/')

            mods {
                masterweapons {
                    //noinspection GroovyAssignabilityCheck
                    source sourceSets.main
                }
            }
        }
    }
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.16.5-36.1.0'

    // You may put jars on which you depend on in ./libs or you may define them like so..
    // compile "some.group:artifact:version:classifier"
    // compile "some.group:artifact:version"

    // Real examples
    // compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    // compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // The 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    // provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // These dependencies get remapped to your current MCP mappings
    // deobf 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

}

java {
    withJavadocJar()
    withSourcesJar()
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "Master Weapons",
            "Specification-Vendor": "QTech Community",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"QTech Community",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        //noinspection GroovyAssignabilityCheck
        mavenJava(MavenPublication) {
            //noinspection GroovyAssignabilityCheck
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
